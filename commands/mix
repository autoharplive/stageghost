#!/usr/bin/perl
# Crude "play from SoundCloud"
# To do - safetyfy everything, add restrictions
# Accepts a soundcloud permalink
# 2016 @garyd @diemastermonkey for DronesoundTV
# Get JSON for a permalink from soundcloud
# keep only download URL
# Example download URL (from download_url property via 
# wget "https://api.soundcloud.com/tracks/267764556/download?client_id=_______________"

# Various options
# ------------------------------------------------------
my $StopSfx = "sfx/cassette_stop.wav";
my $StartSfx = "sfx/cassette_play.wav";
# Where last read, latest written
my (%Config);
$Config{'MIXQUEUEFILE'} = "remix.queue";
# Filename appended to...
# For MPlayer # my $Player = "/usr/bin/mplayer --novideo --really-quiet -af volume=4.0 ";
# For SOX: my $Player = "/usr/bin/play -q -V0 ";
# New, configurable version
my $Player = `cat config/dronetv.musicplayer`; chomp ($Player);
$Player .= " ";  # In case missing in config
my $ResponseRaw;
# SoundCloud API key
my $CLIENTID=`cat config/soundcloud-client-id.txt`;
chomp ($CLIENTID);
# Relative path where stored if found
my $OUTDIR="remix";
# Rolling queue of URLS to play not yet used
my $QUEUE="remix.queue";
# Previous track (or current, if 'mplayer' active)
my $LAST=`tail -1 $Config{'MIXQUEUEFILE'}`; chomp ($LAST);

# Sound player 
# ------------------------------------------------------
sub fnPlay {
  my $cmd = shift (@_);
  # open (PLAY, "|/bin/sh|")
  open (PLAY, "|/bin/sh")
    or die ("\nFatal: Can't open player with $Player\n");
  print (PLAY "$cmd \&");
  close (PLAY);
}

# Alternate smarter version of getfield
# Get single-instance field from Freesound details
# ------------------------------------------------------
sub fnField {
  my $field = shift (@_);
  my $data = $ResponseRaw; 
  $match = "none";
  $match = $1 if (
    $data =~ /\"$field\"\:\s*\"*([^\\\"]+)\"*(\,|\n|\})/
  );
  return ($match);
}

# Crudely fetch a field from raw SoundCloud response
# This is not the right way but the clean json would
# be a superfluous second request. Warning, this can
# be error prone! Uses global $ResponseRaw
# Example fields:
# "avatar_url":"https://i1.sndcdn.com/avatars-000161337164-xrz4rp-large.jpg"
# ------------------------------------------------------
sub fnGetField {
  my $fn = shift (@_);  # name of field to get
  my $data = $ResponseRaw;
  $data =~ s/\"($fn)\"\:\/\/.*\/(.*)\"/$2/g;
  return ($data);
}

# Give help and exit if no arg
# ------------------------------------------------------
$Arg = shift (@ARGV); chomp ($Arg);
unless ($Arg) {
  print ("[Mix] Plays from http://soundcloud.com. Use MIX and the share link (author MUST permit downloads). MIX RANDOM plays a random track. To replay type: MIX AGAIN");
  exit();
}

# New: Get 2nd arg, which may be search string for 'random' or other
$Search = shift (@ARGV);  # Or empty

# If special arg "random", pick from urls in files in ./links/*
if ($Arg =~ /^rand|^random|^rnd/i) {   # variations supported

  # Quick response to chat even before selection
  `./ytSinglePost "[Mix] Random track request, ok! Let me see what we have laying around..." &`;

  # Get contents of a random file from ./links/*
  # Append (optional 2nd arg) search string if present
  # which randomFile handles as 'match against'
  $k = `./randomFile links/ $Search`; chomp ($k);

  # Simply overwrite "Arg" and drop-through to normal handling
  open (IN, "<$k");  # To do, check errs
  $Arg = <IN>;
  close (IN);
  chomp ($Arg);
}

# Retired: Exit if input not a dmm prefix
# To do: Reinstate "choose only approved" for non-subs
# unless ($Arg =~ /soundcloud.com\/diemastermonkey/) {
`echo "Args: $Arg" >> remix.debug`;
`echo "Author: $Author" >> remix.debug`;


# If mplayer already busy, decline - really sloppy
$Running = `ps -ef | egrep "mplayer --novideo" | egrep -v "grep" | xargs`;
if ($Running =~ /mplayer/) {
  print ("[Mix] Something is playing, queues are coming soon. Playing now: $LAST");
  exit();
}

# New: 'again' arg repeats last track. also avaiable as 'remix'
# Bonus: alternate syntax: repeat, replay, rep
# Replaces Track data as if it were a request
if ($Arg =~ /^aga|^rep/i) {   # variations supported
  $Arg = $LAST;   # already contains last played
  $Replay = 1;	  # Easy check later
}

# Note: Accept only final part of permalink to avoid malfeasance. 
# Only "diemastermonkey/bwoom-bwoom-bwoom" remains...
$Permalink = $Arg;
$Permalink =~ s/.*soundcloud.com\///g;
$Author = $Arg;
# Note: http://soundcloud.com/bradhill/chopin-valse-melancolique
$Author =~ s/.*soundcloud.com\/(.*)\/.*/$1/g;
# Append to bottom of queue (currently used only for replays)
`echo "http://soundcloud.com/$Permalink" >> $QUEUE`;

# Fetch track metadata entry first (kludge: unless replay)
# (a json response with the play link incl)
unless ($Replay) {
  $RESPONSE = `curl --location --silent -o - https://soundcloud.com/$Permalink | egrep download_url | sed 's/.*download_url//g;' | sed 's/,.*//g' | sed 's/.*://g'`;
  $RESPONSE =~ s/\"//g;
  chomp ($RESPONSE);
  `echo "REPONSE $RESPONSE" >> remix.debug`;
}

# Respond now, though perms could still be wrong
`./ytSinglePost "[Mix] Playing $Author...remember stream delay! Props to http://soundcloud.com/$Permalink" &`;

# Ditch w/error to chat if empty response (kludge only if not replay)
if ($Replay == 0) {
  if (! length ($RESPONSE)) {
    print "[Mix] Ouch, sorry - I could not find that track on SoundCloud. Remember to paste the tracks share link. Or try another?";
    exit();
  }

  # Ditch w/error if an m4a file
  if (! length ($RESPONSE)) {
    print "[Mix] Ouch, sorry - I could not remix that track. It might be not downloadable. Try another?";
    exit();
  }
}

# If still here it is valid and metadata exists
# Write to creds and Panel notice right away
# To do: Include requestor shout
`echo " Request: $Author http://soundcloud.com/$Permalink" >> DroneTV.creds`;
`echo "<div id='mix-author' class='mix-author'>$Author</div>" > PanelServerNotice.html`;

# Cant just play it, as its often 302'd. Have to store locally.
# Note forcing URI. To do: errchecks (kludge: unless replay)
unless ($Replay) {
  $Ignored = 
    `curl --location --silent -o remix/imported.mp4 https:$RESPONSE?client_id=$CLIENTID`;
}

# To do: Check it exists and pre-check mplayer can handle
# Note if replay we havent downloaded, just replay file in place

# New! Post a "Note" to the screen, under the 'nowplaying' meta account
`commands/note \"$Author\" nowplaying`;

# New! Set a stream title with the now playing, too
$TS=`date '+%A %l:%M %p'`;
`commands/title \"$TS Now Playing $Author! The Raspberry Pi YouTube Chatbot Project\" nowplaying`;

# New! Kludge but cool - silence any currently-playing samples
# ..but allow any others about to play to proceed. IE duck-out the intro.
# New: First play onboard tape stop, then kill plays, then tape start
# `sleep 0.33`;
`killall play &`;
`play -q -V0 --volume 1.6 $StopSfx &`;  # 'stop' play, eject
# Play with configured player
fnPlay ("$Player remix/imported.mp4");
# Retired # `play -q -V0 --volume 1.0 $StartSfx &`; # insert tape, 'start'

# Kludge: Remix temp file (in case errors get this far)

# For good measure append second alternate attribution to creds
`echo " Props to $Author http://soundcloud.com/$Permalink" >> DroneTV.creds`;


# New: Place wasteful second reqeust for metadata files and displays
# Because preceeding fetch too inflexible. Fix that asap.
# --------------------------------------------------------------------
$ResponseRaw  = `curl --location --silent -o - https://soundcloud.com/$Permalink`;
open (DEBUG, ">remix/remix-data-raw.txt");
print (DEBUG $RemixRaw);
close (DEBUG);

# Create output files with parsed fields
$avatar_url = fnField ("avatar_url");
$duration = fnField ("duration");
$title = fnField ("permalink");
# $avatar_url = fnGetField ("avatar_url");
$Template = "<div><img src=\"$avatar_url\">$title<br/>Duration $duration</div>";
open (META, ">panels/mix_attribution.html");
print (META "$Template");
close (META);

