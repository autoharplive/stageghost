#!/usr/bin/perl
# Update config/dronetv.youtubeoauthtoken, using the 
# dronetv.youtuberefreshtoken, client id and client secret
# Note dronetv.youtuberefreshtoken created by cgi-bin/oauth2callback !
# Note: Should be called about 3600 second intervals actual time
# is given in json response but so far that's what I usually see -dmm

# Simple, cheap, safe config file reader
#   $Config{'DuckVolume'} = fnConfigGet ("dronetv.duckvolume");
# -----------------------------------------------------
sub fnConfigGet {
  my $argFieldName = shift (@_) or return;
  open (IN, "<config/$argFieldName") or return;
  my @in = <IN>;        # Slurp all
  close (IN);
  $out = join ("\n", @in);
  $out =~ s/^#.*\n*$//gmo;
  $out =~ s/^\s*$//gmo;
  $out =~ s/\n|\r//gmo;
  return ($out);
}

# These tokens read from config, used in refresh request
# Note dronetv.youtuberefreshtoken created by cgi-bin/oauth2callback !
my $CallbackUrl = fnConfigGet ("sg.callbackurl");  # should match auth callback
my $ClientID = fnConfigGet ("dronetv.youtubeclientid");
my $ClientSecret = fnConfigGet ("dronetv.youtubeclientsecret");
my $RefreshToken = fnConfigGet ("dronetv.youtuberefreshtoken");
# Where output goes ie refreshed user oauth tokens:
my $TokenFile = "config/dronetv.youtubeoauthtoken";
my $JSONFile = "config/dronetv.youtubeoauthtoken.json"; # Disused as yet

# New: Abort if unconfigured or impossibly small
if (length($ClientID . $ClientSecret . $RefreshToken) < 49) {
  die ("\n$0 Fatal: config/dronetv.youtubeclientid, youtuberefreshtoken and/or clientsecret are foobar\n");
}

# Note: The callback url can be nonsense, as long as it
# matches what was used in ytAuthInit and ytValidateTokens
$Raw = `/usr/bin/curl --silent -X POST -d "refresh_token=$RefreshToken" --data-urlencode "client_id=$ClientID" --data-urlencode "client_secret=$ClientSecret" --data-urlencode "redirect_uri=$CallbackUrl" --data-urlencode "grant_type=refresh_token" https://accounts.google.com/o/oauth2/token`;
chomp ($Raw);

# Console response for og tools
print ($Raw);

# New: Dont update files if no access token found
$Clean = $Raw;
$Clean =~ s/\"//g;
$Clean =~ s/\s+//g;
$Clean =~ s/^.*access_token\://;
$Clean =~ s/\,.*//g;
unless (length($Clean)) {
  die ("$0: No access_token received in response."
      . "\nNo files updated, for safety. Death.");
}
 
# Json response for more sophisticated tools to come
open (OUT, "> $JSONFile") or die ("$0: $! \n");
print (OUT $Raw);
close (OUT);

# Update prod youtubeoauthtoken with just the token
open (OUT, "> $TokenFile") or die ("$0: $! \n");
print (OUT $Clean);
close (OUT);

# Fin
